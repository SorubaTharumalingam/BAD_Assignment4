{
	"info": {
		"_postman_id": "150ae430-22e5-43b5-a0f7-f9894093795f",
		"name": "Bakery",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17737029"
	},
	"item": [
		{
			"name": "Admin Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.text(); // Parsing the response as text",
							"pm.environment.set(\"adminToken\", token); // Saving the token as an environment variable",
							"",
							"pm.test(\"Token is saved in environment variable\", function () {",
							"    var savedToken = pm.environment.get(\"adminToken\");",
							"    pm.expect(savedToken).to.eql(token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"Admin@localhost\",\n  \"password\": \"Secret7$\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5200/Account/Login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Account",
						"Login"
					]
				},
				"description": "Get the admin token"
			},
			"response": []
		},
		{
			"name": "Manager Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.text(); // Parsing the response as text",
							"pm.environment.set(\"managerToken\", token); // Saving the token as an environment variable",
							"",
							"pm.test(\"Token is saved in environment variable\", function () {",
							"    var savedToken = pm.environment.get(\"managerToken\");",
							"    pm.expect(savedToken).to.eql(token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"Manager@localhost\",\n  \"password\": \"Secret7$\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5200/Account/Login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Account",
						"Login"
					]
				},
				"description": "Get the admin token"
			},
			"response": []
		},
		{
			"name": "Baker Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.text(); // Parsing the response as text",
							"pm.environment.set(\"bakerToken\", token); // Saving the token as an environment variable",
							"",
							"pm.test(\"Token is saved in environment variable\", function () {",
							"    var savedToken = pm.environment.get(\"bakerToken\");",
							"    pm.expect(savedToken).to.eql(token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"Baker@localhost\",\n  \"password\": \"Secret7$\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5200/Account/Login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Account",
						"Login"
					]
				},
				"description": "Get the admin token"
			},
			"response": []
		},
		{
			"name": "Driver Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.text(); // Parsing the response as text",
							"pm.environment.set(\"driverToken\", token); // Saving the token as an environment variable",
							"",
							"pm.test(\"Token is saved in environment variable\", function () {",
							"    var savedToken = pm.environment.get(\"driverToken\");",
							"    pm.expect(savedToken).to.eql(token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"Driver@localhost\",\n  \"password\": \"Secret7$\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5200/Account/Login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Account",
						"Login"
					]
				},
				"description": "Get the admin token"
			},
			"response": []
		},
		{
			"name": "Query1-AdminRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains ingredients\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.property('name');",
							"        pm.expect(jsonData[0]).to.have.property('quantity');",
							"        pm.expect(jsonData[0]).to.have.property('allergens');",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Ingredients/ingredients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Ingredients",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query1-ManagerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains ingredients\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.property('name');",
							"        pm.expect(jsonData[0]).to.have.property('quantity');",
							"        pm.expect(jsonData[0]).to.have.property('allergens');",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{managerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/ingredients/ingredients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"ingredients",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query1-BakerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains ingredients\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.property('name');",
							"        pm.expect(jsonData[0]).to.have.property('quantity');",
							"        pm.expect(jsonData[0]).to.have.property('allergens');",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bakerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/ingredients/ingredients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"ingredients",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query1-DriveRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Invalid Authorization",
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{driverToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/ingredients/ingredients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"ingredients",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query1-NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Unauthorization",
							"pm.test(\"Status code is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/ingredients/ingredients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"ingredients",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query2-AdminRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('street');",
							"    pm.expect(jsonData).to.have.property('zip');",
							"    pm.expect(jsonData).to.have.property('latitude');",
							"    pm.expect(jsonData).to.have.property('longitude');",
							"    pm.expect(jsonData).to.have.property('date');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query2-ManagerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('street');",
							"    pm.expect(jsonData).to.have.property('zip');",
							"    pm.expect(jsonData).to.have.property('latitude');",
							"    pm.expect(jsonData).to.have.property('longitude');",
							"    pm.expect(jsonData).to.have.property('date');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{managerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query2-BakerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Invalid Authorization",
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bakerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query2-DriverRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('street');",
							"    pm.expect(jsonData).to.have.property('zip');",
							"    pm.expect(jsonData).to.have.property('latitude');",
							"    pm.expect(jsonData).to.have.property('longitude');",
							"    pm.expect(jsonData).to.have.property('date');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{driverToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query2-NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Unauthorization",
							"pm.test(\"Status code is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query3-AdminRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains baking goods for an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('quantity');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query3-ManagerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains baking goods for an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('quantity');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{managerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query3-BakerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Invalid Authorization",
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bakerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query3-DriverRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains baking goods for an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('quantity');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{driverToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query3-NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Unauthorization",
							"pm.test(\"Status code is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query4-AdminRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains ingredients for a batch\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('quantity');",
							"    pm.expect(jsonData[0]).to.have.property('allergens');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Ingredients/batch/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Ingredients",
						"batch",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query4-ManagerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains ingredients for a batch\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('quantity');",
							"    pm.expect(jsonData[0]).to.have.property('allergens');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{managerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Ingredients/batch/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Ingredients",
						"batch",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query4-BakerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains ingredients for a batch\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('quantity');",
							"    pm.expect(jsonData[0]).to.have.property('allergens');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bakerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Ingredients/batch/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Ingredients",
						"batch",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query4-DriverRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Invalid Authorization",
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{driverToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Ingredients/batch/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Ingredients",
						"batch",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query4-NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Unauthorization",
							"pm.test(\"Status code is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Ingredients/batch/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Ingredients",
						"batch",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query5-AdminRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains delivery for an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('trackId');",
							"    pm.expect(jsonData[0]).to.have.property('street');",
							"    pm.expect(jsonData[0]).to.have.property('zip');",
							"    pm.expect(jsonData[0]).to.have.property('latitude');",
							"    pm.expect(jsonData[0]).to.have.property('longitude');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/deliveries",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"deliveries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query5-ManagerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains delivery for an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('trackId');",
							"    pm.expect(jsonData[0]).to.have.property('street');",
							"    pm.expect(jsonData[0]).to.have.property('zip');",
							"    pm.expect(jsonData[0]).to.have.property('latitude');",
							"    pm.expect(jsonData[0]).to.have.property('longitude');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{managerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/deliveries",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"deliveries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query5-BakerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Invalid Authorization",
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bakerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/deliveries",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"deliveries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query5-DriverRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains delivery for an order\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('trackId');",
							"    pm.expect(jsonData[0]).to.have.property('street');",
							"    pm.expect(jsonData[0]).to.have.property('zip');",
							"    pm.expect(jsonData[0]).to.have.property('latitude');",
							"    pm.expect(jsonData[0]).to.have.property('longitude');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{driverToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/deliveries",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"deliveries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query5-NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Unauthorization",
							"pm.test(\"Status code is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/1/deliveries",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"1",
						"deliveries"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query6-AdminRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains quantities for baking goods\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('quantity');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query6-ManagerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains quantities for baking goods\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('quantity');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{managerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query6-BakerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Invalid Authorization",
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bakerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query6-DriverRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Invalid Authorization",
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{driverToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query6-NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Unauthorization",
							"pm.test(\"Status code is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Orders/bakingGoods",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Orders",
						"bakingGoods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query7-AdminRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has a average delay value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.ok;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{adminToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Batchs/averageDelay",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Batchs",
						"averageDelay"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query7-ManagerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has a average delay value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.ok;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{managerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Batchs/averageDelay",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Batchs",
						"averageDelay"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query7-BakerRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for valid authorization",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has a average delay value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.ok;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bakerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Batchs/averageDelay",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Batchs",
						"averageDelay"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query7-DriverRole",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Invalid Authorization",
							"pm.test(\"Status code is 403 Forbidden\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{driverToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Batchs/averageDelay",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Batchs",
						"averageDelay"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query7-NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Unauthorization",
							"pm.test(\"Status code is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5200/Batchs/averageDelay",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5200",
					"path": [
						"Batchs",
						"averageDelay"
					]
				}
			},
			"response": []
		}
	]
}